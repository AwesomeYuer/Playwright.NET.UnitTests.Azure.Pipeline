# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

parameters:
  - name: RestoreBuildProjects
    type: string
    default: '**/*.csproj'

steps:

- task: DotNetCoreCLI@2
  displayName: Restore Packages
  inputs:
      command: restore
      # feedsToUse: config
      # nugetConfigPath: 'nuget.config'
      projects: '**/*.csproj'
      noCache: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: New Manifest For Tool  
  inputs:
    command: 'custom'
    custom: 'new'
    arguments: 'tool-manifest --force'

- task: DotNetCoreCLI@2
  displayName: Install Playwright CLI
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install Microsoft.Playwright.CLI'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
     **/*.csproj
     # !**/*[Tt]ests.csproj
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run Playwright Install  
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'run playwright install'

# https://stackoverflow.com/questions/57177772/azure-pipelines-where-is-the-codecoverage-generated-by-vstest2
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*Unit[Tt]est*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    resultsFolder: '$(build.ArtifactStagingDirectory)/TestResults/'
    otherConsoleOptions: '/Collect:"Code Coverage;Format=Cobertura"'
    codeCoverageEnabled: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(build.ArtifactStagingDirectory)/TestResults/**/*.Cobertura.xml'
  condition: succeededOrFailed() # always()

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
     **/*.csproj
     !**/*[Tt]est*.csproj
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True
  condition: succeededOrFailed() # always()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathToPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed() # always()
