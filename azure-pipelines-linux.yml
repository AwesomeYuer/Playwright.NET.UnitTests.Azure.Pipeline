# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: Use .NET 6.0
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
      command: restore
      # feedsToUse: config
      # nugetConfigPath: 'nuget.config'
      projects: '**/*.csproj'
      noCache: true

- task: DotNetCoreCLI@2
  displayName: New Manifest For Tool Before Build  
  inputs:
    command: 'custom'
    custom: 'new'
    arguments: 'tool-manifest --force'

- task: DotNetCoreCLI@2
  displayName: Install Playwright CLI Before Build
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install Microsoft.Playwright.CLI'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
     **/*.csproj
     # !**/*MsTest*.csproj
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run Playwright Install chrom After Build
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'run playwright install'

- task: DotNetCoreCLI@2
  displayName: Run Playwright Install msedge After Build
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'run playwright install --force msedge'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: |
      **/*UnitTests*.csproj
    # filter: 'FullyQualifiedName~Playwright'
    arguments: '-e BROWSER=chromium --collect:"XPlat Code Coverage"'

- task: DotNetCoreCLI@2
  displayName: Test@msedge
  inputs:
    command: 'test'
    projects: |
      **/*UnitTests*.csproj
    # filter: 'FullyQualifiedName~Playwright'
    arguments: '-e BROWSER=chromium -e CHANNEL=msedge --collect:"XPlat Code Coverage"'

#- task: PublishTestResults@2
#  displayName: PublishTestResults@2 NUnit
#  inputs:
#    testResultsFormat: 'NUnit'
#    testResultsFiles: '$(Agent.TempDirectory)/**/*.xml'
#    mergeTestResults: true

- task: PublishTestResults@2
  inputs:
    displayName: PublishTestResults@2 VSTest
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
    searchFolder: '$(Agent.TempDirectory)'
    mergeTestResults: true

- task: CopyFiles@2
  inputs:
    contents: '$(Agent.TempDirectory)/**/*.trx'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(build.ArtifactStagingDirectory)/TestResults/**/*.Cobertura.xml'
  condition: succeededOrFailed() # always()

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
     **/*.csproj
     # !**/*[Tt]est*.csproj
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True
  condition: succeededOrFailed() # always()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathToPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed() # always()
