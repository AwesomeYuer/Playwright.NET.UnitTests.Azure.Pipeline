# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

parameters:
  - name: RestoreBuildProjects
    type: string
    default: '**/*.csproj'

steps:
# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: restore
#     projects: '$(Parameters.RestoreBuildProjects)'

- task: DotNetCoreCLI@2
  displayName: Restore Packages
  inputs:
      command: restore
      # feedsToUse: config
      # nugetConfigPath: 'nuget.config'
      projects: '**/*.csproj'
      noCache: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
     **/*.csproj
     !**/*[Tt]ests.csproj
    arguments: '--configuration $(BuildConfiguration)'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*[Tt]ests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    resultsFolder: '$(Build.SourcesDirectory)/TestResults/Coverage/'
    otherConsoleOptions: '--Collect:"Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format="Cobertura"'
    publishTestResults: false
    codeCoverageEnabled: true

# report generator, publish tests and code coverage step
# install as below on your Azure DevOps organization:
# https://marketplace.visualstudio.com/items?itemName=Palmmedia.reportgenerator
# Empty Html report
- task: reportgenerator@5
  inputs:
    reports: '$(Build.SourcesDirectory)\TestResults\Coverage\**\**.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)\TestResults\Coverage\Reports'
    reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura'
    assemblyfilters: '+ConsoleApp1.**;-**Tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    mergeTestResults: true
    failTaskOnFailedTests: false

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/Reports/Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/Reports
    failIfCoverageEmpty: false

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
     **/*.csproj
     !**/*[Tt]ests.csproj
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()