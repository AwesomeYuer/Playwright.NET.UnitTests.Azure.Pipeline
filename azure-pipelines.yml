# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

parameters:
  - name: RestoreBuildProjects
    type: string
    default: '**/*.csproj'

steps:
# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: restore
#     projects: '$(Parameters.RestoreBuildProjects)'

- task: DotNetCoreCLI@2
  displayName: Restore Packages
  inputs:
      command: restore
      # feedsToUse: config
      # nugetConfigPath: 'nuget.config'
      projects: '**/*.csproj'
      noCache: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

## Using Microsoft Fakes in the CI
## Microsoft Fakes Assembly Generation
## https://learn.microsoft.com/en-us/visualstudio/test/isolating-code-under-test-with-microsoft-fakes?view=vs-2022&tabs=csharp
#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    # msbuildArgs: 'ChinaCPPMigTransLayer.MSTest.UnitTests\'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

# add FakesAssemblies to source control that's Git
# add FakesAssemblies reference to UnitTests projects
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
     **/*.csproj
     # !**/*[Tt]ests.csproj
    arguments: '--configuration $(BuildConfiguration)'

# https://stackoverflow.com/questions/57177772/azure-pipelines-where-is-the-codecoverage-generated-by-vstest2
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*[Tt]ests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    resultsFolder: '$(build.ArtifactStagingDirectory)/TestResults/'
    otherConsoleOptions: '/Collect:"Code Coverage;Format=Cobertura"'
    codeCoverageEnabled: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(build.ArtifactStagingDirectory)/TestResults/**/*.Cobertura.xml'
  condition: succeededOrFailed() # always()

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
     **/*.csproj
     !**/*[Tt]ests.csproj
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True
  condition: succeededOrFailed() # always()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathToPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed() # always()
